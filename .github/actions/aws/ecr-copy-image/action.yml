name: 'ECR Copy Image'
description: ""
inputs:
  from-aws-role:
    required: true
  from-aws-region:
    required: true
  to-aws-role:
    required: true
  to-aws-region:
    required: true
  service-name:
    required: true
  revision:
    required: true

runs:
  using: "composite"
  steps:

    - name: configure aws credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ inputs.from-aws-role }}
        aws-region: ${{ inputs.from-aws-region }}      

    - name: Login to Origin Amazon ECR
      id: login-origin-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Pull from origin ECR
      shell: bash
      run: docker pull ${{ steps.login-origin-ecr.outputs.registry }}/${{inputs.service-name}}:${{ inputs.revision }}

    - name: configure aws credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ inputs.to-aws-role }}
        aws-region: ${{ inputs.to-aws-region }}      

    - name: Login to Target Amazon ECR
      id: login-target-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Check if image exist in target
      continue-on-error: true
      id: check-image
      shell: bash
      run: aws ecr describe-images --repository-name ${{ steps.login-target-ecr.outputs.registry }} imageIds imageTag=${{ inputs.revision }} 

    - name: Push to target ECR
      if: steps.check-image.outcome == 'failure'
      shell: bash
      run: |
        docker tag ${{ steps.login-origin-ecr.outputs.registry }}/${{inputs.service-name}}:${{ inputs.revision }}  ${{ steps.login-target-ecr.outputs.registry }}/${{inputs.service-name}}:${{ inputs.revision }} 
        docker push ${{ steps.login-target-ecr.outputs.registry }}/${{inputs.service-name}}:${{ inputs.revision }} 
