name: 'OnPublishECS'

on:  
  workflow_call:
    inputs:
      aws-region:
        required: true
        type: string
      aws-role:
        required: true
        type: string
      revision:
        required: true
        type: string
    secrets:
      tfc-token:
        required: true

env:
  environment: 'dev'
  SERVICE_TYPE: 'ecs-tasks'

permissions:
  contents: read
  id-token: write

jobs:

  create-role:
    environment: dev
    runs-on: ubuntu-latest
    steps:
    - name: "Create ${{ env.environment }} Role"
      uses: cailleach-devops/tfc-shared-actions/.github/actions/aws/aws-create-role@updateWorkflow
      with:
        region: ${{ inputs.aws-region }}
        role: ${{ inputs.aws-role }}
        environment: ${{ env.environment}}
        service-name: ${{ vars.ECS_SERVICE }}
        service-type: ${{ env.SERVICE_TYPE }}

  terraform-app-apply:
    runs-on: ubuntu-latest
    needs: [ create-role ]

    steps:
    - id: checkout
      name: checkout
      uses: actions/checkout@v4
      
    - name: "Terraform Apply"
      uses: cailleach-devops/tfc-shared-actions/.github/actions/tfc/tfc-apply@main
      with:
        tfc-organization: "${{ vars.TFC_ORGANIZATION }}"
        tfc-token: "${{ secrets.tfc-token }}"
        tfc-workspace: "${{github.event.repository.name}}-app-${{ env.environment }}"
        tfc-cfg-directory: 'terraform/app'
        clusterName: "${{ vars.ECS_CLUSTER }}"
        serviceName: "${{ vars.ECS_SERVICE }}"
        revision: ${{ inputs.revision }}
        message: "GitHub Push in Main Branch"
        country: ${{ vars.COUNTRY }}
        aws-region: "${{ inputs.aws-region }}"
        environment-name: ${{ env.environment }}

  app-build:
    runs-on: ubuntu-latest
    needs: [ create-role ]
    steps:
    - id: checkout
      name: checkout
      uses: actions/checkout@v4

    - name: buildAndUnityTest
      uses: cailleach-devops/tfc-shared-actions/.github/actions/node/node-build@main
      with:
        node-version: '20.x'

  database-apply:
    runs-on: ubuntu-latest
    needs: [ create-role ]
    steps:
    - id: checkout
      name: checkout
      uses: actions/checkout@v4
      
    - name: "Someday"
      shell: bash
      run: echo "TO BE IMPLEMENTED..."

  app-publish:
    runs-on: ubuntu-latest
    needs: [ database-apply, terraform-app-apply, app-build]

    steps:
    - id: checkout
      name: checkout
      uses: actions/checkout@v4

    - name: Docker Deploy
      uses: cailleach-devops/tfc-shared-actions/.github/actions/node/node-docker-deploy@main
      with:
        node-version: '20.x'
        service-name: ${{ vars.ECS_SERVICE }}
        revision: ${{ inputs.revision }}
        aws-region: ${{ inputs.aws-region }}
        aws-role: ${{ inputs.aws-role }}

  infra-publish:
    runs-on: ubuntu-latest
    needs: [ database-apply, terraform-app-apply, app-build]

    steps:
    - id: checkout
      name: checkout
      uses: actions/checkout@v4

    - name: "Terraform Infra Apply"
      uses: cailleach-devops/tfc-shared-actions/.github/actions/tfc/tfc-apply@main
      with:
        tfc-organization: "${{ vars.TFC_ORGANIZATION }}"
        tfc-token: "${{ secrets.tfc-token }}"
        tfc-workspace: "${{github.event.repository.name}}-infra-${{ env.environment }}"
        tfc-cfg-directory: 'terraform/infra'
        clusterName: "${{ vars.ECS_CLUSTER }}"
        serviceName: "${{ vars.ECS_SERVICE }}"
        revision: ${{ inputs.revision }}
        message: "GitHub Push in Main Branch"
        country: ${{ vars.COUNTRY }}
        aws-region: "${{ inputs.aws-region }}"
        environment-name: ${{ env.environment }}


  app-rollout:
    runs-on: ubuntu-latest
    needs: [ app-publish, infra-publish]

    steps:
    - name: Wait for Finish
      run: echo "Finished..."
